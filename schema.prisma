generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(dbgenerated("uuid7()")) @db.Uuid
  role                Role                 @default(USER)
  username            String?
  image               String?
  ip                  String?
  createdAt           DateTime             @default(now())
  presentationsCount  Int                  @default(0)
  password            Password?
  session             Session[]
  presentations       Presentation[]
  balance             Balance?
  payments            Payment[]
  assistantChats      AssistantChat[]
  subscriptions       Subscription[]
  symbolsPurshases    SymbolsPurchase[]
  surveyFeedbacks     SurveyFeedback[]
  businessSurveys     BusinessSurvey[]
  passwordRestoration PasswordRestoration?
  auth                Auth[]
  ABUserGroup         ABUserGroup?

  SignUpSurvey SignUpSurvey[]
  IssueReport  IssueReport[]
}

model ABUserGroup {
  userId String     @id @unique @db.Uuid
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  type   ABTestType
}

model Auth {
  id               String            @id @default(dbgenerated("uuid7()")) @db.Uuid
  provider         Provider
  key              String
  userId           String?           @db.Uuid
  user             User?             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authVerification AuthVerification?

  @@unique([provider, userId])
  @@unique([provider, key])
  @@index([userId])
}

model AuthVerification {
  authId String @unique @db.Uuid
  auth   Auth   @relation(fields: [authId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  token  String
}

model SurveyFeedback {
  id        String   @id @default(dbgenerated("uuid7()")) @db.Uuid
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  question  String   @default("Empty")
  answer    String   @default("Empty")
  comment   String?
  createdAt DateTime @default(now())
}

model BusinessSurvey {
  id        String   @id @default(dbgenerated("uuid7()")) @db.Uuid
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment   String
  createdAt DateTime @default(now())
  name      String
  contact   String
  company   String
}

model SignUpSurvey {
  id        String   @id @default(dbgenerated("uuid7()")) @db.Uuid
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  usingFor  String
  learnFrom String
  education String?
  student   String?
  teacher   String?
  workField String?
}

model Balance {
  userId              String @unique @db.Uuid
  user                User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  symbols             Int    @default(0)
  subscriptionSymbols Int    @default(0)
}

model Password {
  userId   String @unique @db.Uuid
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  password String
  salt     String
}

model PasswordRestoration {
  userId String @unique @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  token  String
}

model Session {
  refreshToken String   @id @default(dbgenerated("uuid7()")) @db.Uuid
  userId       String   @db.Uuid
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fingerprint  String   @unique
  ip           String
  userAgent    String
  expiresAt    DateTime
}

model Presentation {
  id                    String                    @id @default(dbgenerated("uuid7()")) @db.Uuid
  userId                String                    @db.Uuid
  user                  User                      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  image                 String?
  status                PresentationStatus        @default(finished)
  symbols               Int                       @default(0)
  isArchived            Boolean                   @default(false)
  createdAt             DateTime                  @default(now())
  slides                Slide[]
  imageOptions          PresentationImageOption[]
  feedback              PresentationFeedback?
  settings              PresentationSettings?
  generationContext     GenerationContext?
  textRegenerationsLeft Int                       @default(0)
  presentationLimits    PresentationLimits?
  PresentationDownload  PresentationDownload[]

  @@index([userId])
}

model PresentationImageOption {
  imageOptionId String      @db.Uuid
  imageOption   ImageOption @relation(fields: [imageOptionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  presentationId String       @db.Uuid
  presentation   Presentation @relation(fields: [presentationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  tag String?

  @@id([imageOptionId, presentationId])
}

model PresentationLimits {
  presentationId String       @unique @db.Uuid
  presentation   Presentation @relation(fields: [presentationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  textRegeneration        Int @default(0)
  imageOptionRegeneration Int @default(0)
  infographikGeneration   Int @default(0)
  slideChange             Int @default(100)
}

model GenerationContext {
  id                   String           @id @default(dbgenerated("uuid7()")) @db.Uuid
  generatingSlideIndex Int              @default(-1)
  error                String
  retryCount           Int              @default(0)
  imagesInProcess      Int              @default(0)
  presentationId       String           @unique @db.Uuid
  presentation         Presentation     @relation(fields: [presentationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contextMessages      ContextMessage[]

  @@index([presentationId])
}

model ContextMessage {
  id                  String               @id @default(dbgenerated("uuid7()")) @db.Uuid
  role                TextModelMessageRole
  text                String
  generationContextId String               @db.Uuid
  generationContext   GenerationContext    @relation(fields: [generationContextId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index(generationContextId)
}

model PresentationSettings {
  id                    String               @id @default(dbgenerated("uuid7()")) @db.Uuid
  userId                String               @db.Uuid
  title                 String
  slidesCount           Int?
  slidesTitles          String[]             @default([])
  slidesExplainedTitles String[]             @default([])
  presentationSource    PresentationSource   @default(generation)
  layoutId              String?              @db.Uuid
  layout                PresentationLayout?  @relation(fields: [layoutId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  theme                 String?
  lang                  String?
  userContext           String?
  fileContext           String?
  color                 String?
  font                  String?
  textAmount            TextAmountType       @default(optimal)
  textTone              TextToneType         @default(normal)
  audience              AudienceType         @default(general_public)
  textChange            TextChangeType?
  createdAt             DateTime             @default(now())
  presentationId        String?              @unique @db.Uuid
  presentation          Presentation?        @relation(fields: [presentationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  additionalQuestions   AdditionalQuestion[]
  imageStyleType        ImageStyleType       @default(photo)
  source                ImageSource?
  useWebSearch          Boolean              @default(false)

  @@index([presentationId])
  @@index([layoutId])
}

model PresentationLayout {
  id                       String                    @id @default(dbgenerated("uuid7()")) @db.Uuid
  name                     String
  slideLayouts             SlideLayout[]
  layoutRoles              LayoutRoles[]
  presentationSettigns     PresentationSettings[]
  fontStyleConfigurations  FontStyleConfiguration[]
  presentationLayoutColor  PresentationLayoutColor[]
  presentationLayoutStyles PresentationLayoutStyles?
  presentationPalette      PresentationPalette[]
}

model PresentationLayoutStyles {
  id                   String             @id @default(dbgenerated("uuid7()")) @db.Uuid
  colorSettingsId      String             @db.Uuid
  colorSettings        ColorSettings      @relation(fields: [colorSettingsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  presentationLayoutId String             @unique @db.Uuid
  presentationLayout   PresentationLayout @relation(fields: [presentationLayoutId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model SlideLayout {
  id                           String                     @id @default(dbgenerated("uuid7()")) @db.Uuid
  number                       Int
  isLast                       Boolean                    @default(false)
  name                         String
  imagesCount                  Int
  sentences                    Int
  maxTokensPerBlock            Int
  minWordsPerSentence          Int
  maxWordsPerSentence          Int
  isActive                     Boolean                    @default(false)
  presentationLayoutId         String                     @db.Uuid
  forGeneration                Boolean                    @default(true)
  presentationLayout           PresentationLayout         @relation(fields: [presentationLayoutId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  blockLayouts                 BlockLayout[]
  slideLayoutAdditionalInfo    SlideLayoutAdditionalInfo?
  userSlideLayouts             UserSlideLayout[]
  slides                       Slide[]
  slideLayoutStyles            SlideLayoutStyles?
  slideLayoutDimensions        SlideLayoutDimensions?
  slideLayoutIndexConfig       SlideLayoutIndexConfig[]
  presentationLayoutIndexColor Int                        @default(0)

  @@index([presentationLayoutId])
}

model FontStyleConfiguration {
  id                   String             @id @default(dbgenerated("uuid7()")) @db.Uuid
  presentationLayoutId String             @db.Uuid
  presentationLayout   PresentationLayout @relation(fields: [presentationLayoutId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  color                String
  fontFamily           FontFamilyType
}

model SlideLayoutStyles {
  slideLayoutId String      @id @db.Uuid
  slideLayout   SlideLayout @relation(fields: [slideLayoutId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model SlideLayoutDimensions {
  slideLayoutId String      @id @db.Uuid
  slideLayout   SlideLayout @relation(fields: [slideLayoutId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  x             Int
  y             Int
  w             Int
  h             Int

  @@index([slideLayoutId])
}

model UserSlideLayout {
  id                        String                     @id @default(dbgenerated("uuid7()")) @db.Uuid
  slideId                   String                     @db.Uuid
  slide                     Slide                      @relation(fields: [slideId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parentLayoutId            String                     @db.Uuid
  parentLayout              SlideLayout                @relation(fields: [parentLayoutId], references: [id])
  isActive                  Boolean                    @default(false)
  userBlockLayouts          UserBlockLayout[]
  userSlideLayoutStyles     UserSlideLayoutStyles?
  userSlideLayoutDimensions UserSlideLayoutDimensions?

  @@unique([slideId, parentLayoutId])
  @@index([slideId])
}

model UserSlideLayoutStyles {
  userSlideLayoutId String          @id @db.Uuid
  userSlideLayout   UserSlideLayout @relation(fields: [userSlideLayoutId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  movable           Boolean         @default(true)
  removable         Boolean         @default(true)
  selectable        Boolean         @default(true)
  styleEditable     Boolean         @default(true)
  contentEditable   Boolean         @default(true)
  visible           Boolean         @default(true)

  @@index([movable])
  @@index([visible])
  @@index([selectable])
  @@index([visible, selectable, movable])
}

model UserSlideLayoutDimensions {
  userSlideLayoutId String          @id @db.Uuid
  userSlideLayout   UserSlideLayout @relation(fields: [userSlideLayoutId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  x                 Int
  y                 Int
  w                 Int
  h                 Int

  @@index([x, y])
  @@index([w, h])
  @@index([x, y, w, h])
  @@index([x])
  @@index([y])
}

model SlideLayoutAdditionalInfo {
  slideLayoutId     String                 @id @db.Uuid
  slideLayout       SlideLayout            @relation(fields: [slideLayoutId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  percentesCount    Int                    @default(0)
  maxSymbolsInBlock Int                    @default(0)
  hasHeaders        Boolean                @default(true)
  type              SlideLayoutType        @default(classic)
  contentType       ContentType?
  iconUrl           String?
  infographicsType  InfographicsStyleType?
}

model BlockLayout {
  id              String          @id @default(dbgenerated("uuid7()")) @db.Uuid
  blockLayoutType BlockLayoutType

  slideLayoutId String      @db.Uuid
  slideLayout   SlideLayout @relation(fields: [slideLayoutId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userBlockLayout UserBlockLayout[]

  dimensions       BlockLayoutDimensions?
  styles           BlockLayoutStyles?
  figure           Figure[]
  blockLayoutLimit BlockLayoutLimit?

  precompiledImage       PrecompiledImage[]
  blockLayoutIndexConfig BlockLayoutIndexConfig[]

  @@index([slideLayoutId])
}

model BlockLayoutDimensions {
  blockLayoutId String      @id @db.Uuid
  blockLayout   BlockLayout @relation(fields: [blockLayoutId], references: [id])
  x             Int
  y             Int
  w             Int
  h             Int
  rotation      Int         @default(0)
}

model UserBlockLayout {
  id String @id @default(dbgenerated("uuid7()")) @db.Uuid

  parentLayoutId String?      @db.Uuid
  parentLayout   BlockLayout? @relation(fields: [parentLayoutId], references: [id])

  userSlideLayoutId String          @db.Uuid
  userSlideLayout   UserSlideLayout @relation(fields: [userSlideLayoutId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  dimensions UserBlockLayoutDimensions?
  styles     UserBlockLayoutStyles?

  editableBlock EditableBlock[]

  @@index([userSlideLayoutId])
}

model UserBlockLayoutDimensions {
  userBlockLayoutId String          @id @db.Uuid
  userBlockLayout   UserBlockLayout @relation(fields: [userBlockLayoutId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  x                 Int
  y                 Int
  w                 Int
  h                 Int
  rotation          Int             @default(0)
}

model AdditionalQuestion {
  id                     String                @id @default(dbgenerated("uuid7()")) @db.Uuid
  question               String
  answer                 String?
  presentationSettingsId String?               @db.Uuid
  presentationSettings   PresentationSettings? @relation(fields: [presentationSettingsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model PresentationFeedback {
  id             String             @id @default(dbgenerated("uuid7()")) @db.Uuid
  rating         PresentationRating
  comment        String?
  presentationId String             @unique @db.Uuid
  presentation   Presentation       @relation(fields: [presentationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Slide {
  id                String             @id @default(dbgenerated("uuid7()")) @db.Uuid
  number            Int
  title             String
  explainedTitle    String             @default("")
  additionalInfo    String             @default("")
  backgroundImage   String?
  layoutId          String?            @db.Uuid
  layout            SlideLayout?       @relation(fields: [layoutId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  presentationId    String             @db.Uuid
  presentation      Presentation       @relation(fields: [presentationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  blocks            OldBlock[]
  editableBlocks    EditableBlock[]
  slideImageOptions SlideImageOption[]
  slideMedia        SlideMedia[]
  userSlideLayouts  UserSlideLayout[]

  @@index([presentationId])
}

model SlideImageOption {
  slideId String @db.Uuid
  slide   Slide  @relation(fields: [slideId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  imageOptionId String      @db.Uuid
  imageOption   ImageOption @relation(fields: [imageOptionId], references: [id], onUpdate: Cascade)

  tag String?

  @@id([slideId, imageOptionId])
}

model LayoutRoles {
  presentationLayoutId String             @db.Uuid
  presentationLayout   PresentationLayout @relation(fields: [presentationLayoutId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role                 Role

  @@id([presentationLayoutId, role])
}

model InfographicsPalletteRole {
  role        Role
  patteteName PalletteNameType

  @@id([role, patteteName])
}

model InfographicsStyleRole {
  id        String                @id @default(dbgenerated("uuid7()")) @db.Uuid
  role      Role
  styleType InfographicsStyleType
  subType   String?
}

model InfographicsSettings {
  id                    String                @id @default(dbgenerated("uuid7()")) @db.Uuid
  imageOptionId         String                @db.Uuid
  imageOption           ImageOption           @relation(fields: [imageOptionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  jsonString            String
  palleteName           PalletteNameType
  type                  InfographicsStyleType
  tableSizes            Int[]                 @default([])
  showMarkers           Boolean?
  showArea              Boolean?
  showTitle             Boolean?
  showLegend            Boolean?
  style                 String?
  width                 Int
  height                Int
  device_pixel_ratio    Int
  background_color      String
  infographics_sub_type String?
  legend_position       LegendPositionType
  fromZero              Boolean?
}

model Icon {
  url     String // S3 URL for icon (legacy) или iconify ID для новых иконок
  blockId String        @id @db.Uuid
  block   EditableBlock @relation(fields: [blockId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model IconifyCache {
  id          String   @id @default(dbgenerated("uuid7()")) @db.Uuid
  iconifyId   String   @unique // e.g., "mdi:home"
  keywords    String[] @default([])
  svgContent  String // Processed SVG with TEMPLATE_COLOR
  originalSvg String // Original SVG from Iconify
  isOutline   Boolean  @default(true) // Whether this is an outline/stroke icon
  useCount    Int      @default(0)
  lastUsed    DateTime @default(now())
  createdAt   DateTime @default(now())

  @@index([iconifyId])
  @@index([keywords])
  @@index([isOutline])
  @@index([lastUsed])
}

model SlideMedia {
  id                     String                  @id @default(dbgenerated("uuid7()")) @db.Uuid
  slideId                String                  @db.Uuid
  slide                  Slide                   @relation(fields: [slideId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  slideMediaImageOptions SlideMediaImageOption[]
  imageId                String?                 @db.Uuid
  image                  ImageOption?            @relation(fields: [imageId], references: [id])

  blockId String?        @unique @db.Uuid
  block   EditableBlock? @relation(fields: [blockId], references: [id])

  @@index([blockId])
  @@index([imageId])
}

model SlideMediaImageOption {
  slideMediaId String     @db.Uuid
  slideMedia   SlideMedia @relation(fields: [slideMediaId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  imageOptionId String      @db.Uuid
  imageOption   ImageOption @relation(fields: [imageOptionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  tag String?

  @@id([slideMediaId, imageOptionId])
}

model ImageOption {
  id                       String                    @id @default(dbgenerated("uuid7()")) @db.Uuid
  source                   ImageSource
  url                      String
  downloadLocation         String?
  authorImage              String?
  authorName               String?
  authorLink               String?
  referalLink              String?
  imageSourceId            String?
  presentationImageOptions PresentationImageOption[]
  slideImageOptions        SlideImageOption[]
  slideMediaImageOptions   SlideMediaImageOption[]
  slideMediaActives        SlideMedia[]
  infographicsSettings     InfographicsSettings[]
}

model PrecompiledImage {
  id            String      @id @default(dbgenerated("uuid7()")) @db.Uuid
  blockLayout   BlockLayout @relation(fields: [blockLayoutId], references: [id])
  blockLayoutId String      @db.Uuid
  url           String
  color         String?
}

model OldBlock {
  id        String  @id @default(dbgenerated("uuid7()")) @db.Uuid
  index     Int
  innerText String
  title     String?
  slideId   String  @db.Uuid
  slide     Slide   @relation(fields: [slideId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model EditableBlock {
  id              String           @id @default(dbgenerated("uuid7()")) @db.Uuid
  blockLayoutType BlockLayoutType?
  text            String
  isReady         Boolean          @default(true)

  slideId    String           @db.Uuid
  slide      Slide            @relation(fields: [slideId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  layoutId   String?          @db.Uuid
  layout     UserBlockLayout? @relation(fields: [layoutId], references: [id])
  slideMedia SlideMedia?
  icon       Icon?

  @@index([slideId])
  @@index([layoutId])
}

model BlockLayoutStyles {
  blockLayoutId   String          @id @db.Uuid
  blockLayout     BlockLayout     @relation(fields: [blockLayoutId], references: [id])
  textVertical    String?
  textHorizontal  String?
  fontSize        Float?
  opacity         Float?
  color           String?
  zIndex          Int?            @default(1)
  pathName        String?
  weight          Float?
  underline       Boolean?        @default(false)
  italic          Boolean?        @default(false)
  listType        ListType?
  autoResize      Boolean?        @default(false)
  fontFamily      FontFamilyType? @default(roboto)
  cropOffsetX     Float?          @default(0)
  cropOffsetY     Float?          @default(0)
  cropScale       Float?          @default(1)
  borderRadius    Int[]           @default([])
  background      String?
  textTransform   TextTransform?  @default(none)
  gradientType    GradientType?   @default(none)
  movable         Boolean         @default(true)
  removable       Boolean         @default(true)
  selectable      Boolean         @default(true)
  styleEditable   Boolean         @default(true)
  contentEditable Boolean         @default(true)
  visible         Boolean         @default(true)
  colorSettingsId String?         @db.Uuid
  colorSettings   ColorSettings?  @relation(fields: [colorSettingsId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

model UserBlockLayoutStyles {
  textVertical      String?
  textHorizontal    String?
  fontSize          Float?
  opacity           Float?
  color             String?
  zIndex            Int?
  pathName          String?
  weight            Float?
  underline         Boolean?        @default(false)
  italic            Boolean?        @default(false)
  listType          ListType?
  autoResize        Boolean?        @default(false)
  fontFamily        FontFamilyType? @default(roboto)
  cropOffsetX       Float?          @default(0)
  cropOffsetY       Float?          @default(0)
  cropScale         Float?          @default(1)
  borderRadius      Int[]           @default([])
  background        String?
  textTransform     TextTransform?  @default(none)
  gradientType      GradientType?   @default(none)
  movable           Boolean         @default(true)
  removable         Boolean         @default(true)
  selectable        Boolean         @default(true)
  styleEditable     Boolean         @default(true)
  contentEditable   Boolean         @default(true)
  visible           Boolean         @default(true)
  userBlockLayout   UserBlockLayout @relation(fields: [userBlockLayoutId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userBlockLayoutId String          @id @db.Uuid
  colorSettingsId   String?         @db.Uuid
  colorSettings     ColorSettings?  @relation(fields: [colorSettingsId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

model ColorSettings {
  id                       String                     @id @default(dbgenerated("uuid7()")) @db.Uuid
  count                    Float
  lightenStep              Float
  darkenStep               Float
  saturationAdjust         Float
  BlockLayoutStyles        BlockLayoutStyles[]
  PresentationLayoutStyles PresentationLayoutStyles[]
  UserBlockLayoutStyles    UserBlockLayoutStyles[]
}

model Plan {
  id               String            @id @default(dbgenerated("uuid7()")) @db.Uuid
  name             String?
  symbols          Int
  price            Int
  approx           Int               @default(0)
  description      String            @default("")
  isActive         Boolean           @default(false)
  subscriptionType SubscriptionType?
  isReccuring      Boolean           @default(false)
  subscriptions    Subscription[]
  symbolsPurchase  SymbolsPurchase[]
  ABPlan           ABPlanStat[]
  PlanLocation     PlanLocation[]
}

model PlanLocation {
  planId   String           @db.Uuid
  plan     Plan             @relation(fields: [planId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  location PlanLocationType
  type     ABTestType       @default(A)

  @@id([planId, location, type])
}

model ABPlanStat {
  id           String     @id @default(dbgenerated("uuid7()")) @db.Uuid
  planId       String     @db.Uuid
  plan         Plan       @relation(fields: [planId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  type         ABTestType
  salesCounter Int        @default(0)

  @@unique([planId, type])
}

model PresentationDownload {
  id             String         @id @default(dbgenerated("uuid7()")) @db.Uuid
  presentationId String         @db.Uuid
  presentation   Presentation   @relation(fields: [presentationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt      DateTime       @default(now())
  downloadFormat DownloadFormat
}

model Payment {
  id                  String               @id @default(dbgenerated("uuid7()")) @db.Uuid
  userId              String               @db.Uuid
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status              PaymentStatus
  price               Int?
  description         String?
  createdAt           DateTime             @default(now())
  symbolsPurchase     SymbolsPurchase?
  subscriptionPayment SubscriptionPayment?

  @@index([userId])
}

model SymbolsPurchase {
  id          String     @id @default(dbgenerated("uuid7()")) @db.Uuid
  userId      String     @db.Uuid
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  symbols     Int
  price       Int
  planId      String     @db.Uuid
  plan        Plan       @relation(fields: [planId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  isActive    Boolean    @default(false)
  createdAt   DateTime   @default(now())
  promocodeId String?    @db.Uuid
  promocode   PromoCode? @relation(fields: [promocodeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payment     Payment?   @relation(fields: [paymentId], references: [id])
  paymentId   String?    @unique @db.Uuid

  @@index([userId])
}

model Subscription {
  id                   String                @id @default(dbgenerated("uuid7()")) @db.Uuid
  userId               String                @db.Uuid
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  externalId           String?
  planId               String                @db.Uuid
  plan                 Plan                  @relation(fields: [planId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt            DateTime              @default(now())
  expiredAt            DateTime?
  activeUntil DateTime?
  promocodeId          String?               @db.Uuid
  promocode            PromoCode?            @relation(fields: [promocodeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subscriptionPayments SubscriptionPayment[]

  @@index([userId])
}

model SubscriptionPayment {
  subscriptionId String       @db.Uuid
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  payment        Payment      @relation(fields: [paymentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  paymentId      String       @unique @db.Uuid

  @@id([subscriptionId, paymentId])
}

model AssistantChat {
  id                String             @id @default(dbgenerated("uuid7()")) @db.Uuid
  title             String?
  userId            String             @db.Uuid
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt         DateTime           @default(now())
  assistantMessages AssistantMessage[]
}

model AssistantMessage {
  id          String                       @id @default(dbgenerated("uuid7()")) @db.Uuid
  chatId      String                       @db.Uuid
  chat        AssistantChat                @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sender      TextModelMessageRole
  text        String
  createdAt   DateTime                     @default(now())
  attachments AssistantMessageAttachment[]
}

model AssistantMessageAttachment {
  id               String           @id @default(dbgenerated("uuid7()")) @db.Uuid
  messageId        String           @db.Uuid
  message          AssistantMessage @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fileSize         Int
  fileType         String
  fileName         String
  filePath         String?
  extractedContent String?
}

model ImageStyle {
  id           String         @id @default(dbgenerated("uuid7()")) @db.Uuid
  type         ImageStyleType @unique
  isFree       Boolean        @default(true)
  thumbnailUrl String
  createdAt    DateTime       @default(now())
}

model PromoCode {
  id               String            @id @default(dbgenerated("uuid7()")) @db.Uuid
  text             String            @unique
  percent          Int
  usesLeft         Int?
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  symbolsPurchases SymbolsPurchase[]
  subscriptions    Subscription[]
}

model Figure {
  id            String       @id @default(dbgenerated("uuid7()")) @db.Uuid
  name          String
  createdAt     DateTime     @default(now())
  blockLayoutId String?      @db.Uuid
  blockLayout   BlockLayout? @relation(fields: [blockLayoutId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

model Theme {
  theme String @unique
  url   String
  color String
}

model PresentationLayoutColor {
  id                   String             @id @default(dbgenerated("uuid7()")) @db.Uuid
  presentationLayout   PresentationLayout @relation(fields: [presentationLayoutId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  presentationLayoutId String             @db.Uuid
  index                Int
  color                String             @default("#ffffff")
  text                 String             @default("#ffffff")
  slideTitle           String             @default("#ffffff")
  blockTitle           String             @default("#ffffff")
  email                String             @default("#ffffff")
  date                 String             @default("#ffffff")
  name                 String             @default("#ffffff")
  percentage           String             @default("#ffffff")
  figure               String[]           @default(["#ffffff"])
  icon                 String             @default("#ffffff")
  background           String             @default("#ffffff")
  subTitle             String             @default("#ffffff")
  number               String             @default("#ffffff")
  logo                 String             @default("#ffffff")
}

model PresentationPalette {
  id                     String                   @id @default(dbgenerated("uuid7()")) @db.Uuid
  presentationLayout     PresentationLayout       @relation(fields: [presentationLayoutId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  presentationLayoutId   String                   @db.Uuid
  color                  String                   @default("#ffffff")
  slideLayoutIndexConfig SlideLayoutIndexConfig[]
  slideConfigSequence    SlideConfigSequence[]

  @@index([presentationLayoutId])
  @@index([color])
}

model SlideConfigSequence {
  id                    String              @id @default(dbgenerated("uuid7()")) @db.Uuid
  presentationPalette   PresentationPalette @relation(fields: presentationPaletteId, references: [id], onDelete: Cascade, onUpdate: Cascade)
  presentationPaletteId String              @db.Uuid
  configSequence        Int[]               @default([1, 1])

  @@index([presentationPaletteId])
}

model SlideLayoutIndexConfig {
  id                       String                 @id @default(dbgenerated("uuid7()")) @db.Uuid
  presentationPalette      PresentationPalette    @relation(fields: presentationPaletteId, references: [id], onDelete: Cascade, onUpdate: Cascade)
  presentationPaletteId    String                 @db.Uuid
  configNumber             Int
  slideLayout              SlideLayout            @relation(fields: slideLayoutId, references: [id], onDelete: Cascade, onUpdate: Cascade)
  slideLayoutId            String                 @db.Uuid
  blockLayoutIndexConfig   BlockLayoutIndexConfig @relation(fields: blockLayoutIndexConfigId, references: [id], onDelete: Cascade, onUpdate: Cascade)
  blockLayoutIndexConfigId String                 @db.Uuid
  blockLayoutConfig        BlockLayoutConfig      @relation(fields: blockLayoutConfigId, references: [id], onDelete: Cascade, onUpdate: Cascade)
  blockLayoutConfigId      String                 @db.Uuid

  @@index([presentationPaletteId])
  @@index([slideLayoutId])
  @@index([blockLayoutIndexConfigId])
  @@index([blockLayoutConfigId])
  @@index([configNumber])
  @@index([presentationPaletteId, configNumber])
}

model BlockLayoutIndexConfig {
  id                     String                   @id @default(dbgenerated("uuid7()")) @db.Uuid
  blockLayout            BlockLayout              @relation(fields: blockLayoutId, references: [id], onDelete: Cascade, onUpdate: Cascade)
  blockLayoutId          String                   @db.Uuid
  indexColorId           Int                      @default(0)
  indexFontId            Int                      @default(0)
  slideLayoutIndexConfig SlideLayoutIndexConfig[]

  @@index([blockLayoutId])
  @@index([indexColorId])
  @@index([indexFontId])
  @@index([blockLayoutId, indexColorId, indexFontId])
}

model BlockLayoutConfig {
  id                     String                   @id @default(dbgenerated("uuid7()")) @db.Uuid
  text                   String[]                 @default(["#ffffff"])
  slideTitle             String[]                 @default(["#ffffff"])
  blockTitle             String[]                 @default(["#ffffff"])
  email                  String[]                 @default(["#ffffff"])
  date                   String[]                 @default(["#ffffff"])
  name                   String[]                 @default(["#ffffff"])
  percentage             String[]                 @default(["#ffffff"])
  figure                 String[]                 @default(["#ffffff"])
  icon                   String[]                 @default(["#ffffff"])
  background             String[]                 @default(["#ffffff"])
  subTitle               String[]                 @default(["#ffffff"])
  number                 String[]                 @default(["#ffffff"])
  logo                   String[]                 @default(["#ffffff"])
  font                   FontFamilyType[]         @default([roboto])
  slideLayoutIndexConfig SlideLayoutIndexConfig[]
}

model IssueReport {
  id          String   @id @default(cuid())
  userId      String?   @db.Uuid
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  createdAt   DateTime @default(now())
  name        String
  contact     String
  description String
}

model TextAmountConfiguration {
  id                  String         @id @default(dbgenerated("uuid7()")) @db.Uuid
  textAmountType      TextAmountType
  minTextBlocks       Int
  maxTextBlocks       Int
  preferredTextBlocks Int
  description         String?
  isActive            Boolean        @default(true)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  @@unique([textAmountType])
}

model BlockLayoutLimit {
  minWords      Int         @default(1)
  maxWords      Int         @default(1)
  blockLayoutId String      @id @db.Uuid
  blockLayout   BlockLayout @relation(fields: [blockLayoutId], references: [id])
}

enum ABTestType {
  A
  B
  C
  D
}

enum SlideLayoutType {
  classic
  chart
  table
  infographics
  title
  last
  fewText
  optimalText
  manyText
  extraText
  other
}

enum PresentationStatus {
  in_process
  failed
  finished
}

enum Role {
  ADMIN
  USER
  MIIN
  SBERMARKETING
  GAZPROM
  EFES
  RAIFFEISEN
}

enum TextModelMessageRole {
  user
  system
  assistant
}

enum PresentationRating {
  like
  dislike
  neutral
}

enum PaymentStatus {
  created
  pending
  succeeded
  canceled
}

enum ImageSource {
  serp_api
  stable
  stable_gpu
  stable_premium_gpu
  midjourney
  mock
  yandex_search
  kandinsky
  yandex_art
  gigachat_art
  unsplash
  yandex_images
  freepik
  freepik_ai
  giphy
  lummi
  recraft
  google_imagen
  uploaded
  precompiled
  placeholder
}

enum ImageStyleType {
  none
  photo
  bwphoto
  picture
  stock
  icon
  digital_illustration
  realistic_image
  precompiled
}

enum InfographicsStyleType {
  timeline
  grid
  line
  bar
  chart
  pie
  doughnut
  grid_timeline
  bar_horizontal
  table
}

enum PalletteNameType {
  sm_light
  sm_dark
  blueMonochrome
  greenMonochrome
  purpleMonochrome
  redMonochrome
  grayMonochrome
}

enum Provider {
  local
  google
  yandex
  vkontakte
  telegram
}

enum SubscriptionType {
  year
  month
  quarter
}

enum BlockLayoutType {
  text
  slideTitle
  blockTitle
  email
  date
  name
  percentage
  image
  infographik
  table
  figure
  icon
  background
  watermark
  subTitle
  number
}

enum PresentationSource {
  generation
  upload
  file
  byslide
}

enum ListType {
  none
  marker
  numeric
}

enum LegendPositionType {
  top
  bottom
  left
  right
  chartArea
}

enum FontFamilyType {
  roboto
  oswald
  inter
  sberbank
  feature_mono
  g8
  montserrat_alternates
  oddval
  vollda
  eb_garamond
  geologican
  merriweather
  nunito
  open_sans
  playfair_display
  raleway
  roboto_slab
  rubik
  ubuntu
  montserrat
  gazprom
  sbermarketing
  manrope
  ibm_plex_sans
  roboto_serif
  pt_astra_serif
  unbounded
  onder
  onest
  exo2
  pacifico
  advaken_sans
  actay
  actay_wide
  bounded
  comfortaa
  oktyabrina_script
  arial
}

enum TextTransform {
  none
  uppercase
  lowercase
}

enum GradientType {
  linear
  radial
  conic
  none
}

enum DownloadFormat {
  pdf
  pptx
  mail
}

enum PlanLocationType {
  download
  leavingPaywall
}

enum TextAmountType {
  minimal
  optimal
  extensive
}

enum TextToneType {
  normal
  scientific
  creative
}

enum AudienceType {
  general_public
  university
  school
  business
  potential_clients
  investors
}

enum TextChangeType {
  better
  new
  same
}

enum ContentType {
  plainText
  statistics
  steps
}
